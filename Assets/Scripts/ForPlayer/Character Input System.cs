//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Settings/Character Input System.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Settings/Character Input System.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @CharacterInputSystem: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @CharacterInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Character Input System"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""f2a1c093-e874-44df-907e-3d0112dff944"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""af34a779-32da-4468-aa33-6d761305a241"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""835984b7-89e3-472e-b79c-f92ddf7816dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""21989438-281a-4b3b-a302-1f29d36cc7c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""d83a663c-b552-425b-aac5-cdd8ccca2e08"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""56c39784-9e70-4b14-88c7-effbc2977aba"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""782b3df5-58ab-49c8-a2d8-5ef6a2a5f61b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b412afe0-3594-4db1-8b4a-75ffc4edb45d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""84333ef6-a1e8-47d2-9486-24b66a5dac99"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""76907a72-c252-4de1-bf37-299c9df01851"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55d451d2-b37f-4d1d-8c0e-8d571f7a562e"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""EquipmentPlay"",
            ""id"": ""92dc1145-85f6-4405-a451-3e3f6e5216e9"",
            ""actions"": [
                {
                    ""name"": ""ChoseEquip1"",
                    ""type"": ""Button"",
                    ""id"": ""41aaecf3-d84a-453a-a8a2-8f95d0a1fa76"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UseEquip"",
                    ""type"": ""Button"",
                    ""id"": ""a444402e-9aa6-4e10-9af6-52e2aeee987c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChoseEquip2"",
                    ""type"": ""Button"",
                    ""id"": ""9cf988e6-0ab2-429b-a6b8-5731800fdd18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChoseEquip3"",
                    ""type"": ""Button"",
                    ""id"": ""9e33e932-3f4d-4436-8ad8-d47a338dfd1b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChoseEquip4"",
                    ""type"": ""Button"",
                    ""id"": ""b5858475-a0ff-4237-a973-85b4ed6fd57a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChoseEquip5"",
                    ""type"": ""Button"",
                    ""id"": ""cdf2371c-6740-4d86-bf4a-66678f9c5dd0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b3ece151-9f6e-4302-8b86-16b1aea20019"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ChoseEquip1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52c709d4-9f36-49c5-975c-b894f8adadce"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""UseEquip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d504730f-1d0e-4e68-8a0d-efa6268f7bf2"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChoseEquip2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""847ff6dd-984a-488d-ad57-22e525381791"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChoseEquip3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b47a116-961d-4bcd-9c14-db9cb6438066"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChoseEquip4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a64c951d-4ea0-4fdf-868c-505bbfdf4a87"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChoseEquip5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": []
        }
    ]
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_Move = m_GamePlay.FindAction("Move", throwIfNotFound: true);
        m_GamePlay_Jump = m_GamePlay.FindAction("Jump", throwIfNotFound: true);
        m_GamePlay_Fire = m_GamePlay.FindAction("Fire", throwIfNotFound: true);
        // EquipmentPlay
        m_EquipmentPlay = asset.FindActionMap("EquipmentPlay", throwIfNotFound: true);
        m_EquipmentPlay_ChoseEquip1 = m_EquipmentPlay.FindAction("ChoseEquip1", throwIfNotFound: true);
        m_EquipmentPlay_UseEquip = m_EquipmentPlay.FindAction("UseEquip", throwIfNotFound: true);
        m_EquipmentPlay_ChoseEquip2 = m_EquipmentPlay.FindAction("ChoseEquip2", throwIfNotFound: true);
        m_EquipmentPlay_ChoseEquip3 = m_EquipmentPlay.FindAction("ChoseEquip3", throwIfNotFound: true);
        m_EquipmentPlay_ChoseEquip4 = m_EquipmentPlay.FindAction("ChoseEquip4", throwIfNotFound: true);
        m_EquipmentPlay_ChoseEquip5 = m_EquipmentPlay.FindAction("ChoseEquip5", throwIfNotFound: true);
    }

    ~@CharacterInputSystem()
    {
        UnityEngine.Debug.Assert(!m_GamePlay.enabled, "This will cause a leak and performance issues, CharacterInputSystem.GamePlay.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_EquipmentPlay.enabled, "This will cause a leak and performance issues, CharacterInputSystem.EquipmentPlay.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private List<IGamePlayActions> m_GamePlayActionsCallbackInterfaces = new List<IGamePlayActions>();
    private readonly InputAction m_GamePlay_Move;
    private readonly InputAction m_GamePlay_Jump;
    private readonly InputAction m_GamePlay_Fire;
    /// <summary>
    /// Provides access to input actions defined in input action map "GamePlay".
    /// </summary>
    public struct GamePlayActions
    {
        private @CharacterInputSystem m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public GamePlayActions(@CharacterInputSystem wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "GamePlay/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_GamePlay_Move;
        /// <summary>
        /// Provides access to the underlying input action "GamePlay/Jump".
        /// </summary>
        public InputAction @Jump => m_Wrapper.m_GamePlay_Jump;
        /// <summary>
        /// Provides access to the underlying input action "GamePlay/Fire".
        /// </summary>
        public InputAction @Fire => m_Wrapper.m_GamePlay_Fire;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="GamePlayActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="GamePlayActions" />
        public void AddCallbacks(IGamePlayActions instance)
        {
            if (instance == null || m_Wrapper.m_GamePlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="GamePlayActions" />
        private void UnregisterCallbacks(IGamePlayActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="GamePlayActions.UnregisterCallbacks(IGamePlayActions)" />.
        /// </summary>
        /// <seealso cref="GamePlayActions.UnregisterCallbacks(IGamePlayActions)" />
        public void RemoveCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="GamePlayActions.AddCallbacks(IGamePlayActions)" />
        /// <seealso cref="GamePlayActions.RemoveCallbacks(IGamePlayActions)" />
        /// <seealso cref="GamePlayActions.UnregisterCallbacks(IGamePlayActions)" />
        public void SetCallbacks(IGamePlayActions instance)
        {
            foreach (var item in m_Wrapper.m_GamePlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="GamePlayActions" /> instance referencing this action map.
    /// </summary>
    public GamePlayActions @GamePlay => new GamePlayActions(this);

    // EquipmentPlay
    private readonly InputActionMap m_EquipmentPlay;
    private List<IEquipmentPlayActions> m_EquipmentPlayActionsCallbackInterfaces = new List<IEquipmentPlayActions>();
    private readonly InputAction m_EquipmentPlay_ChoseEquip1;
    private readonly InputAction m_EquipmentPlay_UseEquip;
    private readonly InputAction m_EquipmentPlay_ChoseEquip2;
    private readonly InputAction m_EquipmentPlay_ChoseEquip3;
    private readonly InputAction m_EquipmentPlay_ChoseEquip4;
    private readonly InputAction m_EquipmentPlay_ChoseEquip5;
    /// <summary>
    /// Provides access to input actions defined in input action map "EquipmentPlay".
    /// </summary>
    public struct EquipmentPlayActions
    {
        private @CharacterInputSystem m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public EquipmentPlayActions(@CharacterInputSystem wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "EquipmentPlay/ChoseEquip1".
        /// </summary>
        public InputAction @ChoseEquip1 => m_Wrapper.m_EquipmentPlay_ChoseEquip1;
        /// <summary>
        /// Provides access to the underlying input action "EquipmentPlay/UseEquip".
        /// </summary>
        public InputAction @UseEquip => m_Wrapper.m_EquipmentPlay_UseEquip;
        /// <summary>
        /// Provides access to the underlying input action "EquipmentPlay/ChoseEquip2".
        /// </summary>
        public InputAction @ChoseEquip2 => m_Wrapper.m_EquipmentPlay_ChoseEquip2;
        /// <summary>
        /// Provides access to the underlying input action "EquipmentPlay/ChoseEquip3".
        /// </summary>
        public InputAction @ChoseEquip3 => m_Wrapper.m_EquipmentPlay_ChoseEquip3;
        /// <summary>
        /// Provides access to the underlying input action "EquipmentPlay/ChoseEquip4".
        /// </summary>
        public InputAction @ChoseEquip4 => m_Wrapper.m_EquipmentPlay_ChoseEquip4;
        /// <summary>
        /// Provides access to the underlying input action "EquipmentPlay/ChoseEquip5".
        /// </summary>
        public InputAction @ChoseEquip5 => m_Wrapper.m_EquipmentPlay_ChoseEquip5;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_EquipmentPlay; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="EquipmentPlayActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(EquipmentPlayActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="EquipmentPlayActions" />
        public void AddCallbacks(IEquipmentPlayActions instance)
        {
            if (instance == null || m_Wrapper.m_EquipmentPlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EquipmentPlayActionsCallbackInterfaces.Add(instance);
            @ChoseEquip1.started += instance.OnChoseEquip1;
            @ChoseEquip1.performed += instance.OnChoseEquip1;
            @ChoseEquip1.canceled += instance.OnChoseEquip1;
            @UseEquip.started += instance.OnUseEquip;
            @UseEquip.performed += instance.OnUseEquip;
            @UseEquip.canceled += instance.OnUseEquip;
            @ChoseEquip2.started += instance.OnChoseEquip2;
            @ChoseEquip2.performed += instance.OnChoseEquip2;
            @ChoseEquip2.canceled += instance.OnChoseEquip2;
            @ChoseEquip3.started += instance.OnChoseEquip3;
            @ChoseEquip3.performed += instance.OnChoseEquip3;
            @ChoseEquip3.canceled += instance.OnChoseEquip3;
            @ChoseEquip4.started += instance.OnChoseEquip4;
            @ChoseEquip4.performed += instance.OnChoseEquip4;
            @ChoseEquip4.canceled += instance.OnChoseEquip4;
            @ChoseEquip5.started += instance.OnChoseEquip5;
            @ChoseEquip5.performed += instance.OnChoseEquip5;
            @ChoseEquip5.canceled += instance.OnChoseEquip5;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="EquipmentPlayActions" />
        private void UnregisterCallbacks(IEquipmentPlayActions instance)
        {
            @ChoseEquip1.started -= instance.OnChoseEquip1;
            @ChoseEquip1.performed -= instance.OnChoseEquip1;
            @ChoseEquip1.canceled -= instance.OnChoseEquip1;
            @UseEquip.started -= instance.OnUseEquip;
            @UseEquip.performed -= instance.OnUseEquip;
            @UseEquip.canceled -= instance.OnUseEquip;
            @ChoseEquip2.started -= instance.OnChoseEquip2;
            @ChoseEquip2.performed -= instance.OnChoseEquip2;
            @ChoseEquip2.canceled -= instance.OnChoseEquip2;
            @ChoseEquip3.started -= instance.OnChoseEquip3;
            @ChoseEquip3.performed -= instance.OnChoseEquip3;
            @ChoseEquip3.canceled -= instance.OnChoseEquip3;
            @ChoseEquip4.started -= instance.OnChoseEquip4;
            @ChoseEquip4.performed -= instance.OnChoseEquip4;
            @ChoseEquip4.canceled -= instance.OnChoseEquip4;
            @ChoseEquip5.started -= instance.OnChoseEquip5;
            @ChoseEquip5.performed -= instance.OnChoseEquip5;
            @ChoseEquip5.canceled -= instance.OnChoseEquip5;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="EquipmentPlayActions.UnregisterCallbacks(IEquipmentPlayActions)" />.
        /// </summary>
        /// <seealso cref="EquipmentPlayActions.UnregisterCallbacks(IEquipmentPlayActions)" />
        public void RemoveCallbacks(IEquipmentPlayActions instance)
        {
            if (m_Wrapper.m_EquipmentPlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="EquipmentPlayActions.AddCallbacks(IEquipmentPlayActions)" />
        /// <seealso cref="EquipmentPlayActions.RemoveCallbacks(IEquipmentPlayActions)" />
        /// <seealso cref="EquipmentPlayActions.UnregisterCallbacks(IEquipmentPlayActions)" />
        public void SetCallbacks(IEquipmentPlayActions instance)
        {
            foreach (var item in m_Wrapper.m_EquipmentPlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EquipmentPlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="EquipmentPlayActions" /> instance referencing this action map.
    /// </summary>
    public EquipmentPlayActions @EquipmentPlay => new EquipmentPlayActions(this);
    private int m_PCSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "GamePlay" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="GamePlayActions.AddCallbacks(IGamePlayActions)" />
    /// <seealso cref="GamePlayActions.RemoveCallbacks(IGamePlayActions)" />
    public interface IGamePlayActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Jump" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnJump(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Fire" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFire(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "EquipmentPlay" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="EquipmentPlayActions.AddCallbacks(IEquipmentPlayActions)" />
    /// <seealso cref="EquipmentPlayActions.RemoveCallbacks(IEquipmentPlayActions)" />
    public interface IEquipmentPlayActions
    {
        /// <summary>
        /// Method invoked when associated input action "ChoseEquip1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnChoseEquip1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UseEquip" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUseEquip(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ChoseEquip2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnChoseEquip2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ChoseEquip3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnChoseEquip3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ChoseEquip4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnChoseEquip4(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ChoseEquip5" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnChoseEquip5(InputAction.CallbackContext context);
    }
}
